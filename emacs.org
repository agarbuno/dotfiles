#+Author:: Alfredo Garbuno
#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

Based on the awesome /Emacs from scratch/  series by [[https://github.com/daviwil][David Wilson]].

* Table of Contents
:PROPERTIES:
:TOC:      :include all  :ignore this :depth 3
:END:

:CONTENTS:
- [[#welcome][Welcome!]]
- [[#tips-for-use][Tips for Use]]
- [[#startup-benchmarking][Startup Benchmarking]]
  - [[#boot-time][Boot time]]
    - [[#the-most-important-tip-dont-load-any-packages][The most important tip: don't load any packages!]]
- [[#package-system-setup][Package System Setup]]
  - [[#basic-package-setup][Basic package setup]]
  - [[#no-littering][No Littering]]
  - [[#automatic-package-updates][Automatic Package Updates]]
  - [[#immortal-buffers][Immortal buffers]]
- [[#basic-ui-configuration][Basic UI Configuration]]
  - [[#dashboard][Dashboard]]
  - [[#font-configuration][Font Configuration]]
  - [[#solaire-mode][Solaire Mode]]
- [[#keybinding-configuration][Keybinding Configuration]]
- [[#ui-configuration][UI Configuration]]
  - [[#command-log-mode][Command Log Mode]]
  - [[#color-theme][Color Theme]]
  - [[#better-modeline][Better Modeline]]
  - [[#which-key][Which Key]]
  - [[#ivy-and-counsel][Ivy and Counsel]]
  - [[#helpful-help-commands][Helpful Help Commands]]
  - [[#text-scaling][Text Scaling]]
  - [[#completions-with-ivy-and-prescient][Completions with ivy and prescient]]
  - [[#beacon-mode][beacon-mode]]
  - [[#indentation][Indentation]]
- [[#org-mode][Org Mode]]
  - [[#better-font-faces][Better Font Faces]]
  - [[#basic-config][Basic Config]]
    - [[#nicer-heading-bullets][Nicer Heading Bullets]]
    - [[#center-org-buffers][Center Org Buffers]]
  - [[#agenda][Agenda]]
  - [[#configure-babel-languages][Configure Babel Languages]]
  - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
  - [[#auto-markup-symbols][Auto-markup symbols]]
  - [[#org-roam][Org Roam]]
  - [[#deft][Deft]]
  - [[#org-roam-bibtex][Org Roam Bibtex]]
  - [[#noter][Noter]]
  - [[#header-for-org-mode][Header for org-mode]]
  - [[#update-table-of-contents-on-save][Update Table of Contents on Save]]
- [[#links-y-contenido-web][Links y contenido web]]
- [[#development][Development]]
  - [[#languages][Languages]]
    - [[#language-servers][Language Servers]]
    - [[#completions-with-company-mode][Completions with company-mode]]
    - [[#completions-with-yasnippets][Completions with yasnippets]]
  - [[#python][Python]]
    - [[#jedi-autocompletion][Jedi autocompletion]]
  - [[#r][R]]
    - [[#polymode-for-rmarkdown][Polymode for Rmarkdown]]
  - [[#debugging][Debugging]]
  - [[#commenting][Commenting]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#terminal][Terminal]]
  - [[#term-mode][term-mode]]
    - [[#better-term-mode-colors][Better term-mode colors]]
  - [[#vterm][vterm]]
  - [[#shell-mode][shell-mode]]
- [[#navigation][Navigation]]
  - [[#dired][Dired]]
  - [[#navigation][Navigation]]
  - [[#configuration][Configuration]]
  - [[#file-operations][File Operations]]
    - [[#marking-files][Marking files]]
    - [[#copying-and-renaming-files][Copying and Renaming files]]
    - [[#deleting-files][Deleting files]]
    - [[#creating-and-extracting-archives][Creating and extracting archives]]
    - [[#other-common-operations][Other common operations]]
  - [[#file-icons-in-dired][File Icons in Dired]]
  - [[#open-external-files][Open external files]]
  - [[#hide--show-dotfiles][Hide / show dotfiles]]
  - [[#window-navigation][Window navigation]]
    - [[#navigation-commands][navigation commands]]
    - [[#evil-mode-alternatives][evil-mode alternatives]]
    - [[#evil-mode-alternatives][evil-mode alternatives]]
    - [[#moving-buffers-between-windows][moving buffers between windows]]
    - [[#go-back-to-window-configuration][go back to window configuration]]
    - [[#winum-mode][winum-mode]]
- [[#productivity][Productivity]]
  - [[#latex-editing][Latex editing]]
    - [[#parenthesis][Parenthesis]]
    - [[#pdf-viewer][PDF Viewer]]
    - [[#bibtex][BibTex]]
    - [[#reference-management][Reference management]]
    - [[#autocompletion-with-lsp][Autocompletion with lsp]]
  - [[#latex-in-org-mode][Latex in org mode]]
  - [[#cdlatex][CDLaTeX]]
  - [[#screenshots][Screenshots]]
  - [[#spell-checking][Spell checking]]
  - [[#pdf-viewing][PDF viewing]]
- [[#presentations][Presentations]]
  - [[#org-tree-slide][Org-tree-slide]]
:END:

* Welcome!

This is the configuration we've been building in the *Emacs From Scratch* series, now written as an Org Mode document.  This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.

*NOTE:* If you run into any issues while using this configuration, please [[https://github.com/daviwil/emacs-from-scratch/issues/new][file an issue]] or send me an email at =david at systemcrafters.cc=.

The following variables are used to tweak some of the configuration pieces for use in the live streams so you might need to adjust them for your local machine if you try to use this configuration directly.

#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  ;; You will most likely need to adjust this font size for your system!
  (defvar ag/default-font-size 150)
  (defvar ag/default-variable-font-size 150)

  ;; Make frame transparency overridable
  (defvar ag/frame-transparency '(95 . 95))

#+end_src

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Startup Benchmarking
** Boot time

Add a function to =emacs-startup-hook= to print out the duration of Emacs startup:

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1000))

  (defun ag/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'ag/display-startup-time)

#+end_src
All startup behavior is happening in the =normal-top-level= function!

A helpful manual page is [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][Summary: Sequence of Actions at Startup]].

*** The most important tip: don't load any packages!

=use-package= gives you a few different ways to defer package loading:

- =:hook= - Package will be loaded the first time one of the hooks is invoked
- =:bind= - Package will be loaded the first time one of the key bindings is used
- =:commands= - Package will be loaded when one of the commands are used
- =:mode= - Package will be loaded the first time a file with a particular extension is opened
- =:after= - Load this package after other specific packages are loaded
- =:defer= - If you don't use any of the other options, this one will defer loading until after startup

There are a [[https://github.com/jwiegley/use-package#getting-started][few other options]] =use-package= provides, but these are all the most likely ones you would use.

The strategy is to look at all of your =use-package= expressions and decide whether it *really* needs to be loaded immediately at startup!

If you want to make sure a package gets loaded at startup despite the use of any of the options above, use =:demand t=.

Let's try it!

#+begin_src emacs-lisp

  ;; "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

#+end_src

* Package System Setup
** Basic package setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

      ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
      (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)

#+end_src

** No Littering

#+begin_src emacs-lisp

  (use-package no-littering)

  (setq no-littering-etc-directory
        (expand-file-name "config/" user-emacs-directory))
  (setq no-littering-var-directory
        (expand-file-name "data/" user-emacs-directory))
  (require 'no-littering)

  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

** Immortal buffers

#+begin_src emacs-lisp

  (defun ag/immortal-buffers ()
    (if (or (eq (current-buffer) (get-buffer "*scratch*"))
            (eq (current-buffer) (get-buffer "*Messages*")))
        (progn (bury-buffer)
               nil)
      t))

  (add-hook 'kill-buffer-query-functions 'ag/immortal-buffers)

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell nil)
  (setq ring-bell-function (lambda ()
                             (invert-face 'mode-line)
                             (run-with-timer 0.1 nil 'invert-face 'mode-line)))


  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha ag/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,ag/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  deft-mode-hook
                  shell-mode-hook
                  reftex-select-bib-mode-hook
                  pdf-outline-buffer-mode-hook
                  org-agenda-mode-hook
                  pdf-view-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0)))
    )

#+end_src

** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ;; (setq dashboard-page-separator "\n\f\n")
    (setq dashboard-startup-banner 'logo)  
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (dashboard-modify-heading-icons '((projects . "rocket")
                                      (agenda . "milestone")
                                      (recents . "history")
                                      (bookmarks . "bookmark")))
    (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
    (setq dashboard-items '(
                            (recents  . 10)
                            (projects . 5)
                            (bookmarks . 5)
                            (agenda . 10)
                            ))
    )
#+end_src

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "Fira Code Retina" :height ag/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height ag/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height ag/default-font-size :weight 'regular)

#+end_src

** Solaire Mode

#+begin_src emacs-lisp
  (use-package solaire-mode
    :config
    (solaire-global-mode 1)
    )
#+end_src

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

For more keybinding configurations take a look in: [[https://emacs.stackexchange.com/questions/62227/enable-os-x-keys-in-emacs][key bindings - Enable OS X keys in Emacs - Emacs Stack Exchange]]

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; Adds accents in spanish
  (global-set-key (kbd "M-a") '(lambda () (interactive) (insert "á")))
  (global-set-key (kbd "M-e") '(lambda () (interactive) (insert "é")))
  (global-set-key (kbd "M-i") '(lambda () (interactive) (insert "í")))
  (global-set-key (kbd "M-o") '(lambda () (interactive) (insert "ó")))
  (global-set-key (kbd "M-u") '(lambda () (interactive) (insert "ú")))
  (global-set-key (kbd "M-y") '(lambda () (interactive) (insert "ü")))
  (global-set-key (kbd "M-n") '(lambda () (interactive) (insert "ñ")))
  ;; For macOS type of keybindings
  (global-set-key (kbd "<s-up>")    'beginning-of-buffer)
  (global-set-key (kbd "<s-down>")  'end-of-buffer)
  (global-set-key (kbd "<s-left>")  'beginning-of-line)
  (global-set-key (kbd "<s-right>") 'end-of-line)

#+end_src

#+begin_src emacs-lisp

  (use-package general
    :after evil
    :config
    (general-create-definer ag/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (ag/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))
      ))

#+end_src

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

#+end_src
  
#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* UI Configuration

** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp

  (use-package command-log-mode
    :commands command-log-mode)

#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-monokai-pro t))
  ;; :config (load-theme 'doom-nord t))

  (use-package color
    :after org
    :config
    (set-face-attribute 'org-block nil :background
                        (color-darken-name
                         (face-attribute 'default :background) 5))
    (set-face-attribute 'org-block-begin-line nil :background
                        (color-darken-name
                         (face-attribute 'default :background) -10))
    ) 

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :config
      (setq doom-modeline-height 25)
      (setq display-battery-mode t)
      (setq display-time-mode nil)
      (setq display-time-24hr-format 1)
      (setq display-time-day-and-date 1)
      )

  (use-package minions
    :config 
    (setq doom-modeline-minor-modes t)
    (minions-mode 1)
    )

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      ;; (message "Ivy got loaded!")
      (ivy-mode 1))


    (use-package counsel
      :bind (("C-M-j" . 'counsel-switch-buffer)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
      :config
      (counsel-mode 1))

    (use-package all-the-icons-ivy-rich
      :after ivy
      :init
      (all-the-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :after all-the-icons-ivy-rich
      :init
      (ivy-rich-mode 1))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

    (use-package hydra
      :defer t)

    (defhydra hydra-text-scale (:timeout 4)
      "scale text"
      ("j" text-scale-increase "in")
      ("k" text-scale-decrease "out")
      ("f" nil "finished" :exit t))

    (ag/leader-keys
      "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Completions with ivy and prescient


#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :config
    (ivy-prescient-mode 1)
    (prescient-persist-mode 1))

  (setq prescient-sort-length-enable nil)
  (setq ivy-prescient-retain-classic-highlighting t)

#+end_src

** =beacon-mode=

#+begin_src emacs-lisp
  (use-package beacon
    :ensure t 
    :config
    (beacon-mode 1)
    (setq beacon-blink-when-focused 1)
    (setq beacon-size 70)
    )
#+end_src

** Indentation

Let's make indentation with 4 spaces and no tab 

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq-default indent-tabs-mode nil)
    (setq tab-width 4)
    (setq-default tab-always-indent 'complete)
  )
#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =ag/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun ag/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+Begin_src emacs-lisp

  (defun ag/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . ag/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-support-shift-select t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
        '("~/Google Drive/orgfiles/agenda/tasks.org"
          "~/Google Drive/orgfiles/agenda/habits.org"))

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
            (sequence "WAIT(w)" "READ(r)" "VIEW(v)" "|" ))
          )

    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))

    (setq org-todo-keyword-faces
          '(("TODO" . (:foreground "hot pink" :weight bold))
            ("DONE" . (:foreground "#00e6ab" :weight bold))
            ("NEXT" . (:foreground "dark orange" :weight bold))
            ("WAIT" . (:foreground "#aeffff" :weight bold))
            ("READ" . (:foreground "#ffcc66" :weight bold))
            ("VIEW" . (:foreground "#8787ff" :weight bold))
            ))

    (setq org-tag-alist
          '((:startgroup)
            ;; Put mutually exclusive tags here
            (:endgroup)
            ("research" . ?r)
            ("maestria" . ?m)
            ("teaching" . ?t)
            ("paper"    . ?p)
            ("book"     . ?b)
            ("idea" . ?i)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Ongoing Tasks")))
              (tags-todo "+research/!-NEXT" ((org-agenda-overriding-header "Research Projects")))
              (tags-todo "+teaching/!-NEXT" ((org-agenda-overriding-header "Teaching Tasks")))
              (tags-todo "+maestria/!-NEXT" ((org-agenda-overriding-header "McDatos Tasks")))

              (tags-todo "-research-teaching-maestria/!-NEXT"
                         ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                          ;; (org-agenda-files "~/Google Drive/orgfiles/agenda/tasks.org")
                          (org-agenda-text-search-extra-files nil)
                          ))
              ))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")
            ))

    (setq org-capture-templates
          `(("t" "Tasks/Projects ")
            ("tt" "Task" entry
             (file+olp "~/Google Drive/orgfiles/agenda/tasks.org" "Active")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("tr" "Research Tasks" entry
             (file+olp "~/Google Drive/orgfiles/agenda/tasks.org" "Research")
             "* TODO %?  :research:\nLink: %a")
            ("tp" "Reading Reminder" entry
             (file+olp "~/Google Drive/orgfiles/agenda/tasks.org" "Reading")
             "* READ %?  \nLink: %a")
            ("tv" "Talk or Video" entry
             (file+olp "~/Google Drive/orgfiles/agenda/tasks.org" "Tutorial")
             "* VIEW %?  \nLink: %a")
            ("j" "Journal" entry
             (file+datetree "~/Google Drive/orgfiles/agenda/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("h" "Habit" entry
             (file+olp "~/Google Drive/orgfiles/agenda/habits.org" "Work")
             "* TODO %?")
            )
          )

    (define-key global-map (kbd "C-c t t")
      (lambda () (interactive) (org-capture nil "tt")))

    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c t c") 'org-capture)

    (require 'org-habit)
    (setq org-habit-show-all-today t) 
    (setq org-habit-graph-column 60)

    (ag/org-font-setup))

#+end_src

#+begin_src emacs-lisp

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun ag/org-mode-visual-fill ()
    (setq visual-fill-column-width 110
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . ag/org-mode-visual-fill))

#+end_src

** Agenda
See interesting configurations [[https://github.com/nalhasan/emacsconf2020/blob/master/config.org][here]].
** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)
     (R . t)
     (python . t)))

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("la" . "src latex"))
    (add-to-list 'org-structure-template-alist '("r" . "src R"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'split-window-right)
  (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))
#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =ag/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun ag/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/github-repos/dotfiles/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ag/org-babel-tangle-config)))

#+end_src

** Auto-markup symbols
This package makes it much easier to edit =Org= documents when =org-hide-emphasis-markers= is turned on. It temporarily shows the emphasis markers around certain markup elements when you place your cursor inside of them. No more fumbling around with === and =*= characters!

#+begin_src emacs-lisp

  (setq org-hide-emphasis-markers t)
  (use-package org-appear
        :hook (org-mode . org-appear-mode))

#+end_src

** Org Roam

For more option for customization see: [[https://www.reddit.com/r/orgmode/comments/lmlsdr/simple_question_re_orgroam_how_to_access_capture/][Simple question re org-roam - how to access capture templates? : orgmode]]

#+begin_src emacs-lisp

  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Google Drive/orgfiles/notes/"))
    (org-roam-completion-everywhere t)
    ;; (org-roam-completion-system 'default)
    ;; Capture templates
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)
       ("r" "reference" plain
        "%? %^{author} - %^{year}:"
        :if-new
        (file+head
         "References/${citekey}.org"
         "#+title: ${title}\n")
        :unnarrowed t)
       )
     )
    ;; Dailies templates
    (org-roam-dailies-directory "Journal/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        "\n*  %?"
        :if-new (file+head
                 "%<%Y-%m-%d>.org"
                 "#+title: %<%Y-%m-%d %a>\n"))
       ("t" "talks" entry
        "\n*  %<%I:%M %p> - %^{Talk Title} by %^{Speaker} :talks:\n\n%?\n\n"
        :if-new (file+head+olp
                 "%<%Y-%m-%d>.org"
                 "#+title: %<%Y-%m-%d %a>\n"
                 ("Talks")))
       ("m" "meeting" entry
        "\n*  %<%I:%M %p> - %^{Meeting Title} :meeting:\n\n%?\n\n"
        :if-new (file+head+olp
                 "%<%Y-%m-%d>.org"
                 "#+title: %<%Y-%m-%d %a>\n"
                 ("Meetings")))
       ))

    :bind (("C-c n b" . org-roam-buffer)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n t" . org-roam-tag-add)
           ("C-c n r" . org-roam-tag-remove)
           ;; Dailies
           ("C-c n m" . org-roam-dailies-capture-today)
           )

    :config
    (org-roam-setup)
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-side-window)
                   (side . right)
                   (slot . 0)
                   (window-width . 0.33)
                   (preserve-size . (t nil))
                   (window-parameters . ((no-other-window . t)
                                         (no-delete-other-windows . t)))))

  (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
    "Return the file TITLE for the node."
    (org-roam-get-keyword "TITLE" (org-roam-node-file node))
    )

  (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
    (let* ((count (caar (org-roam-db-query
                         [:select (funcall count source)
                                  :from links
                                  :where (= dest $s1)
                                  :and (= type "id")]
                         (org-roam-node-id node)))))
      (if (> count 0)
          (concat (propertize "=has:backlinks=" 'display (all-the-icons-material "link" :face 'all-the-icons-dblue :height 0.9)) (format "%d" count))
        (concat (propertize "=not-backlinks=" 'display (all-the-icons-material "link" :face 'org-roam-dim :height 0.9))  " ")
        ))
    )

  (cl-defmethod org-roam-node-functiontag ((node org-roam-node))
    "The first tag of notes are used to denote note type"
    (let* ((specialtags ag/lit-categories)
           (tags (seq-filter (lambda (tag) (not (string= tag "ATTACH"))) (org-roam-node-tags node)))
           (functiontag (seq-intersection specialtags tags 'string=)))
      (concat
       (if functiontag
           (propertize "=@=" 'display (all-the-icons-faicon "tags" :face 'all-the-icons-dgreen :v-adjust 0.02 :cache :height 0.7))
         (propertize "= =" 'display (all-the-icons-faicon "tags" :face 'all-the-icons-dgreen :v-adjust 0.02 :height 0.7))
         )
       " "
       (string-join functiontag ", ")))
    )

  (cl-defmethod org-roam-node-othertags ((node org-roam-node))
    "Return the file TITLE for the node."
    (let* ((tags (seq-filter (lambda (tag) (not (string= tag "ATTACH"))) (org-roam-node-tags node)))
           (specialtags ag/lit-categories)
           (othertags (seq-difference tags specialtags 'string=))
           )
      (concat
       (if othertags
           (propertize "=@=" 'display "")
         (propertize "= =" 'display "")
         )
       (propertize (string-join othertags ", ") 'face 'all-the-icons-lorange))
      ))

  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    "Return the hierarchy for the node."
    (let* ((title (org-roam-node-title node))
           (olp (mapcar (lambda (s) (if (> (length s) 10) (concat (substring s 0 10)  "...") s)) (org-roam-node-olp node)))
           (level (org-roam-node-level node))
           (filetitle (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
           (shortentitle (if (> (length filetitle) 20) (concat (substring filetitle 0 20)  "...") filetitle))
           (separator (concat " " (all-the-icons-material "chevron_right") " "))
           )
      (cond
       ((>= level 1) (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "list" :face 'all-the-icons-blue))
                             " "
                             (propertize shortentitle 'face 'org-roam-dim)
                             (propertize separator 'face 'org-roam-dim)
                             title))
       (t (concat (propertize (format "=level:%d=" level) 'display (all-the-icons-material "insert_drive_file" :face 'all-the-icons-yellow))
                  " "
                  title))
       )
      ))  
    )
#+end_src

#+begin_src emacs-lisp
  (setq org-roam-v2-ack t)
#+end_src

#+begin_src emacs-lisp
  (setq ag/lit-categories
            '("video" "book" "podcast" "article" "website" "journal" "quote" "structure")
            )
  (setq org-roam-node-display-template (concat "${backlinkscount:16}" "${functiontag:13}" "${othertags:40}" "${hierarchy:*}"))
#+end_src

** Deft

#+begin_src emacs-lisp

    (use-package deft
      :commands (deft)
      :bind (("C-c n d" . deft)
             ("C-c n u" . ag/pick-deft-dir))
      :config
      (setq  deft-directory "~/Google Drive/orgfiles/notes/"
             deft-extensions '("md" "org"))

      ;; Setup my list of deft directories
      (defvar ag/deft-dir-list '()
        "A list of deft directories to pick")

      (setq ag/deft-dir-list '("/Users/agarbuno/Google Drive/orgfiles/notes"
                               "/Users/agarbuno/Google Drive/orgfiles/notes/Journal"
                               "/Users/agarbuno/Google Drive/orgfiles/notes/References"
                               ))

      (defun ag/pick-deft-dir ()
        "Select directories from a list"
        (interactive)
        (setq deft-directory 
              (ido-completing-read "Select directory: " ag/deft-dir-list))
        (deft-refresh))

      (setq deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+\\#\\+title: ")
      (setq deft-strip-title-regexp
            (concat
             "\\(?:^%+\\|^#\\+TITLE: *\\|^[#* ]+\\|-\\*-[[:alpha:]]+-\\*-\\|^Title:[	 ]*\\|#+$\\)"
             ))

      )

#+end_src

** Org Roam Bibtex

#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :bind (("C-c b d" . doi-add-bibtex-entry)
           ("C-c b a" . arxiv-get-pdf-add-bibtex-entry)
           ("C-c b k" . org-ref-clean-bibtex-entry))
    :custom
    (org-roam-bibtex-mode 1)
    :config
    (require 'org-ref)
    (setq reftex-default-bibliography '("~/Google Drive/orgfiles/references/bibliography.bib"
                                        "~/Google Drive/orgfiles/references/bibliographypdfs.bib"))

    (setq org-ref-completion-library 'org-ref-ivy-cite)
    (require 'org-ref-ivy-cite)

    ;; see org-ref for use of these variables
    (setq org-ref-bibliography-notes "~/Google Drive/orgfiles/references/notes.org"
          org-ref-default-bibliography '("~/Google Drive/orgfiles/references/bibliography.bib"
                                         "~/Google Drive/orgfiles/references/bibliographypdfs.bib")
          org-ref-pdf-directory "~/Google Drive/orgfiles/references/bibtex-pdfs/"
          org-ref-notes-directory "~/Google Drive/orgfiles/references/bibtex-notes/"
          org-ref-show-broken-links t)

    (setq orb-preformat-keywords '("citekey" "author" "year" "title" "keywords" "file")
          orb-process-file-keyword t
          orb-file-field-extensions '("pdf"))

    (add-to-list 'org-roam-capture-templates
                 '("r" "reference" plain
                   "%? %^{author} - %^{year}:"
                   :if-new
                   (file+head
                    "References/${citekey}.org"
                    "#+title: ${title}\n")
                   :unnarrowed t)
                 )
    )
    #+end_src

** Noter
Based on [[https://github.com/nalhasan/emacsconf2020/blob/master/config.org][nalhasan]]'s configuration.

#+begin_src emacs-lisp
  (pdf-loader-install)
  (use-package pdf-tools
    :config
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-annot-activate-created-annotations t)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
    (setq pdf-view-resize-factor 1.1)
    (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
    (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
    (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
    )
#+end_src

#+begin_src emacs-lisp

  (use-package org-noter
      :config
      (setq org-noter-always-create-frame t
            org-noter-separate-notes-from-heading t
            org-noter-default-heading-title "Page $p$"
            org-noter-auto-save-last-location t
            org-noter-separate-notes-from-heading t
            org-noter-doc-property-in-notes t
            org-noter-notes-search-path '("~/Google Drive/orgfiles/references/bibtex-notes/")
            )
      )
    ;; I'm disabling this as I don't come from interleave
    ;; (setq org-noter-property-doc-file "INTERLEAVE_PDF"
    ;;       org-noter-property-note-location "INTERLEAVE_PAGE_NOTE")

#+end_src


#+begin_src emacs-lisp

  (add-to-list 'org-roam-capture-templates
               '("n" "references notes"  plain
                 (file "~/.emacs.d/templates/org-capture/reference-noter")
                 :if-new
                 (file+head
                  "References/${citekey}.org"
                  "#+title: ${title}\n")
                 :unnarrowed t)
               )

#+end_src

** Header for org-mode

#+begin_src emacs-lisp
  (use-package org-sticky-header
    :hook (org-mode . org-sticky-header-mode)
    :config
    ;; Show full path in header
    (setq org-sticky-header-full-path 'full)
    ;; Use > instead of / as separator
    (setq org-sticky-header-outline-path-separator " > ")
    )
#+end_src

** Update Table of Contents on Save

Use =org-make-toc= to automatically update the ToC in any header with a property named =TOC=.

#+begin_src emacs-lisp

  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))

#+end_src

* Links y contenido web

#+begin_src emacs-lisp

  (use-package org-web-tools
    :after org
    :bind
    ("C-c n l" . org-web-tools-insert-link-for-url)
    )

#+end_src

* Development
** Languages
*** Language Servers

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun ag/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (setq lsp-pyls-disable-warning t)
    (lsp-headerline-breadcrumb-mode)
    )

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :hook (lsp-mode . ag/lsp-mode-setup)
    :config
    (setq lsp-enable-which-key-integration t)
    (setq lsp-auto-guess-root nil)
    (setq lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    (setq lsp-file-watch-threshold nil)
    (setq read-process-output-max (* 1024 1024))
    (setq lsp-diagnostics-provider :none)
    (setq lsp-eldoc-hook nil)
    (setq flycheck-mode nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    )

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-delay .1)
    )

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

**** lsp-r

#+begin_src R :tangle no

  install.packages("languageserver")

#+end_src

*** Completions with company-mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook ((lsp-mode . company-mode)
           (ess-r-mode . company-mode)
           (LaTeX-mode . company-mode))
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (company-tooltip-align-annotations t)
    (company-selection-wrap-around t)
    )

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

*** Completions with yasnippets

As of today, =yasnippets= is not bundled with snippets directly. You need to install =yasnippets-snippets=.

#+begin_src emacs-lisp

  (use-package yasnippet
    :config
    (yas-reload-all)
    :init
    (yas-global-mode 1)
    )

#+end_src

** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

pip install --user "python-language-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

*** Jedi autocompletion

*Note* I am using lsp-jedi as =pyls= seems to be deprecated. The instructions to install it are as follows

First install 
#+begin_src shell :tangle no
  pip install jedi json-rpc service_factory virtualenv
#+end_src

#+begin_src emacs-lisp :tangle no
  M-x package-install lsp-jedi
  M-x jedi:install-server
#+end_src

and enable =jedi:setup= or =jedi:ac_setup= in the buffer. 

#+begin_src emacs-lisp :tangle no

  (use-package lsp-jedi
    :ensure t
    :config
    (with-eval-after-load "lsp-mode"
      (add-to-list 'lsp-disabled-clients 'pyls)
      (add-to-list 'lsp-enabled-clients 'jedi)))

#+end_src

#+begin_src emacs-lisp 

  (use-package dap-mode)

  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

#+end_src

** R
#+begin_src emacs-lisp

  (defun ag/insert-r-pipe ()
    "R - %>% operator or 'then' pipe operator"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (reindent-then-newline-and-indent))

  (use-package ess
    :defer t
    :commands R
    :bind (
           :map ess-mode-map
                ("C-<" . ess-insert-assign)
                ("C->" . ag/insert-r-pipe)
                :map inferior-ess-mode-map
                ("C-<" . ess-insert-assign)
                ("C->" . ag/insert-r-pipe)
                )
    :init
    (load "ess-site")
    :custom
    (setq ess-eval-visibly 'nowait) 
    )

#+end_src

*** Polymode for Rmarkdown

#+begin_src emacs-lisp

  (use-package poly-R
    :config
    (defun ag/insert-rmd-chunk (language)
      "Insert an r-chunk in markdown mode. Necessary due to interactions between polymode and yasnippet"
      (interactive "sLanguage: ")
      (insert (concat "```{" language "}\n\n```"))
      (forward-line -1))
    (define-key poly-markdown+r-mode-map (kbd "M-n M-i") #'ag/insert-rmd-chunk)
    )

#+end_src

** Debugging

I recommend watching "Emacs IDE - How to Debug Your Code with dap-mode" to learn more about the features!

Configuration instructions: https://emacs-lsp.github.io/dap-mode/page/configuration/#python

However, we will use =debugpy= (=ptvsd= is deprecated):

#+begin_src sh

pip install debugpy

#+end_src

Run =dap-debug= and select the pytest configuration.  Fails due to python2!

Set =dap-python-executable= to =python3=

Running the default pytest configuration doesn't launch from the correct path, let's edit the configuration with =dap-debug-edit-template=:

#+begin_src emacs-lisp :tangle no

(dap-register-debug-template
  "Python :: Run pytest (gallery-dl)"
  (list :type "python"
        :cwd "/home/daviwil/Projects/Code/gallery-dl"
        :module "pytest"
        :request "launch"
	      :debugger 'debugpy
        :name "Python :: Run pytest (gallery-dl)"))

#+end_src

However, this still doesn't work correctly from within a file in the project folder.  dap-mode bug?

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/github-repos")
      (setq projectile-project-search-path '("~/github-repos")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    (add-hook 'text-mode-hook 'disable-evil-mode)
    )

  ;; This disables evil mode in text windows

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Terminal

** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
    (setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm

[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

#+end_src

* Navigation
** Dired

- =C-x d= or =C-x C-f= - =dired=
- =dired-jump= - open Dired buffer, select the current file
- =projectile-dired=

** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=

** Configuration

 #+begin_src emacs-lisp

   (use-package dired
     :ensure nil
     :commands (dired dired-jump)
     :bind (("C-x C-j" . dired-jump))
     :config
     (evil-collection-define-key 'normal 'dired-mode-map
       "h" 'dired-single-up-directory
       "l" 'dired-single-buffer))

   (use-package dired-single
     :after dired)

   (use-package all-the-icons-dired
     :after dired
     :config
     (setq all-the-icons-dired-monochrome nil))
 #+end_src

** File Operations

*** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
*** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

*** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

*** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

** File Icons in Dired

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :after dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src

** Open external files

- =!= or =&= to launch an external program on a file

#+begin_src emacs-lisp

  (use-package dired-open
    :after dired
    :config
    ;; Doesn't work as expected!
    (add-to-list 'dired-open-functions #'dired-open-xdg t)
    ;; -- OR! --
    (setq dired-open-extensions '(("png" . "preview")
                                  ("mkv" . "preview"))))

#+end_src

** Hide / show dotfiles


#+begin_src emacs-lisp

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src

** Window navigation

Each item lists the default Emacs binding followed by the evil-mode binding.  Note that many of the evil-mode bindings also allow you to use Ctrl with the second key in the sequence!

*** navigation commands

| Command                             | Key   | Description                            |
|-------------------------------------+-------+----------------------------------------|
| =delete-window=                     | ~C-x 0~ | Close the current window               |
| =delete-other-windows=                | ~C-x 1~ | Close all other windows                |
| =split-window-below=                  | ~C-x 2~ | Split the current window horizonally   |
| =split-window-right=                  | ~C-x 3~ | Split the current window vertically    |
| =shrink-window-horizontally=          | ~C-x {~ | Make the window smaller horizontally   |
| =enlarge-window-horizontally=         | ~C-x }~ | Make the window bigger horizontally    |
| =shrink-window=                       | None! | Shrink the window vertically           |
| =shrink-window-if-larger-than-buffer= | ~C-x -~ | Shrink the window vertically to buffer |
| =balance-windows=                     | ~C-x +~ | Balance the sizes of all windows       |


*TIP*: You can use ~C-u~ (=universal-argument=) and a numeric prefix before running the =shrink= and =enlarge= commands to dictate the mount by which the window is resized.

*** evil-mode alternatives

| Command                  | Key          | Description                             |
|--------------------------+--------------+-----------------------------------------|
| =evil-window-delete=     | ~C-w C-c~    | Close the current window                |
| =delete-other-windows=   | ~C-w C-o~    | Close all other windows                 |
| =evil-window-split=      | ~C-w C-s~    | Split the current window horizontally   |
| =evil-window-vsplit=     | ~C-w C-v~    | Split the current window vertically     |
| =evil-window-set-width=  | ~C-w (pipe)~ | Use numeric prefix to set window width  |
| =evil-window-set-height= | ~C-w _~      | Use numeric prefix to set window height |
| =balance-windows=        | ~C-w =~      | Balance the sizes of all windows        |

*TIP*: You can use a numeric argument before running =evil-window-set-width= and =evil-window-set-height= to specify the desired size of the window.

*** evil-mode alternatives

| Command           | Keys    | Description                        |
|-------------------+---------+------------------------------------|
| =evil-window-next=  | ~C-w C-w~ | Select the next visible window     |
| =evil-window-prev=  | ~C-w W~   | Select the previous visible window |
| =ffap-other-window= | ~C-w C-f~ | Open a file in another window      |

Commands to switch focus on windows

- =evil-window-left= - ~C-w h~
- =evil-window-right= - ~C-w l~
- =evil-window-up= - ~C-w k~
- =evil-window-down= - ~C-w j~

  #+begin_src emacs-lisp
    ;; For macOS type of keybindings
    (global-set-key (kbd "<M-s-up>")    'evil-window-up)
    (global-set-key (kbd "<M-s-down>")  'evil-window-down)
    (global-set-key (kbd "<M-s-left>")  'evil-window-left)
    (global-set-key (kbd "<M-s-right>") 'evil-window-right)
  #+end_src

*** moving buffers between windows

Use =buffer-move= for a more general solution:

- =buf-move=: Turn on a mode where you can move the current buffer around with arrow keys, any other key finishes it
- =buf-move-left=
- =buf-move-right=
- =buf-move-up=
- =buf-move-down=

#+begin_src emacs-lisp

  (use-package buffer-move
    :custom
    (buffer-move-stay-after-swap t)
    )

  (global-set-key (kbd "<C-s-up>")     'buf-move-up)
  (global-set-key (kbd "<C-s-down>")   'buf-move-down)
  (global-set-key (kbd "<C-s-left>")   'buf-move-left)
  (global-set-key (kbd "<C-s-right>")  'buf-move-right)

#+end_src

*** go back to window configuration

=winner-mode= provides useful functions for undoing and redoing window configurations:

- =winner-undo= (~C-c left~ or ~C-w u~ bound below)
- =winner-redo= (~C-c right~ or ~C-w U~ bound below)

#+begin_src emacs-lisp

  (use-package winner-mode
    :ensure nil
    :bind (:map evil-window-map
           ("u" . winner-undo)
           ("U" . winner-redo))
    :config
    (winner-mode))

#+end_src

*** winum-mode

This mode shows numbers in your windows' mode lines to tell you what keys you can press after using the key binding =C-x w=.  Check out the [[https://github.com/deb0ch/emacs-winum][winum-mode]] page for more useful tips!

#+begin_src emacs-lisp

  (use-package winum
    :config
    (winum-mode))

#+end_src

* Productivity
** Latex editing
 Based on:
 - [[https://tex.stackexchange.com/questions/364361/how-to-set-syntax-highlighting-for-citep-as-same-as-cite-in-auctex][macros - How to set syntax highlighting for \citep as same as \cite in AUCTeX? - TeX - LaTeX Stack Exchange]]

#+begin_src emacs-lisp
  (defun ag/latex-mode-visual-fill ()
    (setq fill-column 80)
    (display-fill-column-indicator-mode 1)
    )

  (use-package latex
    :ensure auctex
    :hook (LaTeX-mode . ag/latex-mode-visual-fill)
    :custom
    (reftex-plug-into-AUCTeX t)
    (reftex-default-bibliography '("~/Google Drive/orgfiles/references/bibliography.bib"
                                   "~/Google Drive/orgfiles/references/bibliographypdfs.bib"))
    (LaTeX-indent-level 4
                        LaTeX-item-indent 0
                        TeX-brace-indent-level 4
                        TeX-newline-function 'newline-and-indent)
    :config
    (setq font-latex-match-reference-keywords
          '(
            ("cite" "[{")
            ("citep" "[{")
            ("cite*" "[{")
            )
          )
    (setq TeX-parse-self t)
    ;; Prevent superscripts and subscripts from being displayed in a
    ;; different font size.
    (setq font-latex-fontify-script nil)
    ;; Prevent section headers from being displayed in different font
    ;; sizes.
    (setq font-latex-fontify-sectioning 1)
    ;; Don't be afraid to break inline math between lines.
    (setq LaTeX-fill-break-at-separators nil)
    (setq TeX-source-correlate-method 'synctex)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    ;; Use pdf-tools to open PDF files
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-source-correlate-start-server t)

    ;; Update PDF buffers after successful LaTeX runs
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)
    )

#+end_src

Use =mic-paren= to highlight parehthesis for math environments in latex.

#+begin_src emacs-lisp
  (use-package mic-paren
    :after latex
    :config
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (font-lock-add-keywords nil
                                        '(("\\\\alpha" 0 font-lock-warning-face t)))
                ))
  )
#+end_src

*** Parenthesis

#+begin_src emacs-lisp

  (use-package smartparens
    :custom
    (smartparens-global-strict-mode nil)
   )

#+end_src

*** PDF Viewer

#+begin_src emacs-lisp

  (use-package pdf-tools
      :after latex)

#+end_src

*** BibTex

#+begin_src emacs-lisp
  (use-package bibtex
    :defer t ; built-in with Emacs
    :bind (("C-c b s" . bibtex-sort-buffer))
    :custom
    (bibtex-autokey-titleword-length 0)
    (bibtex-autokey-titleword-separator "")
    (bibtex-autokey-titlewords 0)
    (bibtex-autokey-year-length 4)
    (bibtex-autokey-year-title-separator "")
    (bibtex-align-at-equal-sign t)
    (bibtex-autokey-name-case-convert-function 'capitalize)
    :config
    (defun ag/bibtex-generate-autokey ()
      (interactive)
      ;; first we delete the existing key
      (bibtex-beginning-of-entry)
      (re-search-forward bibtex-entry-maybe-empty-head)
      (if (match-beginning bibtex-key-in-head)
          (delete-region (match-beginning bibtex-key-in-head)
                         (match-end bibtex-key-in-head)))
      (let* ((names (bibtex-autokey-get-names))
             (year (bibtex-autokey-get-year))
             (existing-keys (bibtex-parse-keys))
             key)
        (setq key (format "%s%s" names year))
        (let ((ret key))
          (cl-loop for c
                   from ?b to ?z
                   while (assoc ret existing-keys)
                   do (setq ret (format "%s%c" key c)))
          ret)))
    (advice-add #'bibtex-generate-autokey :override #'ag/bibtex-generate-autokey)
    )

#+end_src

*** Reference management

#+begin_src emacs-lisp
    (use-package ivy-bibtex
      :bind (("C-c b f" . ivy-bibtex)
             ("C-c b n" . ivy-bibtex-with-notes))
      :config
      (setq bibtex-completion-bibliography '("~/Google Drive/orgfiles/references/bibliography.bib"
                                             "~/Google Drive/orgfiles/references/bibliographypdfs.bib"))
      (setq  bibtex-completion-library-path "~/Google Drive/orgfiles/references/bibtex-pdfs"
             bibtex-completion-notes-path   "~/Google Drive/orgfiles/references/bibtex-notes")

      (setq bibtex-completion-pdf-symbol "⌘")
      (setq bibtex-completion-notes-symbol "✎")
      (setq ivy-bibtex-default-action 'ivy-bibtex-insert-citation)
      )
#+end_src


#+begin_src emacs-lisp
  (use-package reftex
    :after auctex
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
    (setq reftex-save-parse-info t
          reftex-enable-partial-scans t
          reftex-use-multiple-selection-buffers t
          reftex-plug-into-AUCTeX t
          reftex-vref-is-default t
          reftex-cite-format
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\textcite{%l}")
            (?a . "\\autocite[]{%l}")
            (?p . "\\parencite{%l}")
            (?f . "\\footcite[][]{%l}")
            (?F . "\\fullcite[]{%l}")
            (?x . "[]{%l}")
            (?X . "{%l}"))

          font-latex-match-reference-keywords
          '(("cite" "[{")
            ("citep" "[{")
            ("cites" "[{}]")
            ("footcite" "[{")
            ("footcites" "[{")
            ("parencite" "[{")
            ("textcite" "[{")
            ("fullcite" "[{")
            ("citetitle" "[{")
            ("citetitles" "[{")
            ("headlessfullcite" "[{"))

          reftex-cite-prompt-optional-args nil
          reftex-cite-cleanup-optional-args t))
#+end_src

*** Autocompletion with lsp

#+begin_src emacs-lisp

  (use-package lsp-latex
    :after auctex
    :config
    (add-hook 'TeX-mode-hook 'lsp)
    (add-hook 'LaTeX-mode-hook 'lsp)
    (add-hook 'bibtex-mode-hook 'lsp)
    )


#+end_src

** Latex in org mode

You can produce whole Latex documents within Org Mode alone. There are a bit of configurations that needs to be put in place. For starters you can use inline Latex or source blocks.

A very nice guide for writing this type of documents can be found in: [[http://www.wouterspekkink.org/academia/writing/tool/doom-emacs/2021/02/27/writing-academic-papers-with-org-mode.html][Latex within OrgMode]] . A snippet of the template for org-latex documents can be found there and in the repo. 

$\LaTeX$ rendering is very small in my configuration. I needed to scale it up.

#+begin_src emacs-lisp

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.8))
  (use-package org-fragtog
    :config (add-hook 'org-mode-hook 'org-fragtog-mode))

#+end_src

** CDLaTeX

To be able to speed-up math environments and templates in org-mode.

#+begin_src emacs-lisp

  (use-package cdlatex
    :after (tex)
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex))
    ;; (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

#+end_src

** Screenshots

Configuration taken from [[https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/][zzamboni.org | How to insert screenshots in Org documents on macOS]]

#+begin_src emacs-lisp

  (use-package org-download
      :after org
      :defer nil
      :custom
      (org-download-method 'directory)
      (org-download-image-dir "images")
      (org-download-heading-lvl nil)
      (org-download-timestamp "%Y%m%d-%H%M%S_")
      (org-download-image-attr-list '("#+attr_html: :width 700 :align center"))
      (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
      :bind
      ("C-c n s" . org-download-screenshot)
      :config
      (require 'org-download))

#+end_src

** Spell checking

#+begin_src emacs-lisp
  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper))
    )

  (use-package flyspell-correct-ivy
    :after flyspell-correct)

  (add-hook 'text-mode-hook 'flyspell-mode)

#+end_src

** PDF viewing

#+begin_src emacs-lisp
 (setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)
#+end_src

* Presentations
** Org-tree-slide

is a simple tool to treat a tree of an org buffer as a single slide. Since each slide is displayed by simple narrowing, an editable presentation is easily achieved without restricting the functionality of Org Mode. And usage of org-tree-slide is not limited to a presentation. Three profiles are predefined for different use cases.

#+begin_src emacs-lisp
    (defun ag/org-start-presentation ()
      (interactive)
      (org-tree-slide-mode 1)
      (org-sticky-header-mode 0)
      (setq text-scale-mode-amount 3)
      (text-scale-mode 1)
      (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                         (header-line (:height 4.5) variable-pitch)
                                         (org-document-title (:height 1.75) org-document-title)
                                         (org-code (:height 1.55) org-code)
                                         (org-verbatim (:height 1.55) org-verbatim)
                                         (org-block (:height 1.25) org-block)
                                         (org-block-begin-line (:height 0.7) org-block)))
      (setq-local org-format-latex-options (plist-put org-format-latex-options :scale 2.5))
      (setq-local visual-fill-column-width 60
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1)
      )

  (defun ag/org-end-presentation ()
    (interactive)
    (text-scale-mode 0)
    (org-sticky-header-mode 1)
    (org-tree-slide-mode 0)
    (setq-local face-remapping-alist '((default variable-pitch default)))
    (setq-local org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    (visual-fill-column-mode 1)
    )
#+end_src

I almost give up on =org-tree-slides= but the comments and solution on [[https://github.com/takaxp/org-tree-slide/issues/13][Issue #13]] using the =hide-lines= package set me back on track. 

#+begin_src emacs-lisp
  (use-package hide-lines
    :after org
    )

  (use-package org-tree-slide
    :defer t
    :after org
    :commands org-tree-slide-mode
    :config
      (evil-define-key 'normal org-tree-slide-mode-map
        (kbd "q") 'ag/org-end-presentation
        (kbd "C-j") 'org-tree-slide-move-next-tree
        (kbd "C-k") 'org-tree-slide-move-previous-tree)
      (setq org-tree-slide-slide-in-effect nil
            org-tree-slide-activate-message "Presentation started."
            org-tree-slide-deactivate-message "Presentation ended."
            org-tree-slide-header t)

      (when (require 'hide-lines nil t)
        (defvar ag/org-src-block-faces nil)
        (defun ag/show-headers ()
          (setq org-src-block-faces 'ag/org-src-block-faces)
          (hide-lines-show-all))
        (defun ag/hide-headers ()
          (setq ag/org-src-block-faces 'org-src-block-faces)
          ;; (setq-local org-src-block-faces
                ;; '(("emacs-lisp" (:background "cornsilk"))))
          (hide-lines-matching "#\\+BEGIN_SRC")
          (hide-lines-matching "#\\+END_SRC"))
          ;; (hide-lines-matching "#\\+ATTR_\\(HTML\\|EXAMPLE\\|VERSE\\|QUOTE\\)")
        (add-hook 'org-tree-slide-play-hook 'ag/hide-headers)
        (add-hook 'org-tree-slide-stop-hook 'ag/show-headers)
      
        (defun advice:org-edit-src-code (&optional code edit-buffer-name)
          (interactive)
          (ag/show-headers))
        (advice-add 'org-edit-src-code :before #'advice:org-edit-src-code)
        (defun advice:org-edit-src-exit ()
          (interactive)
          (ag/hide-headers))
        (advice-add 'org-edit-src-exit :after #'advice:org-edit-src-exit))

      :custom
      (org-tree-slide-breadcrumbs " > ")
      (org-image-actual-width nil)
      )

#+end_src

